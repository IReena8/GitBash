 1.Клиент-Серверная архитектура. 
Сервер-это сущность, которая принимает запрос и отвечает на него (железо, софт). 
Клиент тот, кто отправляет запрос. 
Сервером может быть и клиент, если он отправляет запрос на другие сервера. 
Сервер может быть на телефоне, если есть программка HTTP сервер, 
которая выполняет с помощью HTTP протокола. 
Отправляем HTTP зарос, получаем HTTP ответ. 
Запрос должен быть отправлен HTTP методом на сервер, в котором есть атрибуты:
 ⁃ хедер, 
 ⁃ боди  (имеет или не имеет)
Сервер отвечает статус-кодом. 
Клиентом может быть десктоп, компьютер, телефон; запущен софт, который отправляет запрос на сервер. 
Браузер отправляет запрос на сервер, а сервер присылает клиента-веб интерфейс, 
где мы может посмотреть, почитать, понажимать кнопки. 
Двухуровневая: клиент-сервер
Трехуровневая: клиент-сервер-база данных
Многоуровневая система: клиент-сервер-база данных-другие серваки, на которые прилетают запросы, и прилетают ответы. 

HTTP запрос: имя/эндпоинт(после / -это точка касания API сервера, например, /loginpage)

API (Application Program Interface) - интерфейс, через который пользователь может общаться с сервером. 
Картинка в HTTPS request пакуется в формат txt (base64) 
и с сервера отправляется response и преобразовывается в картинку. 

У браузера есть ядро. Ядро браузера-это механизм, который распознаёт и начинает выполнять java скрипты, HTML. 

Фронтэнд программисты пишут: 
 ⁃ как правильно читать HTML
 ⁃ как правильно отображать стили в каскадной таблице стилей
 ⁃ где расположить картинку
 ⁃ где поставить текст
 ⁃ где поставить и какую кнопку на интерфейсе

Бекэнд программисты пишут:
 ⁃ какой файлик взять
 ⁃ какую обработку даных произвести
 ⁃ сходить в БД
 ⁃ правильно раскомпоновать  и отправить на клиент. 

Ядро браузера распознаёт: 
HTML (картинка будет слева вверху, текст-по центру, цвет, кнопочки и тд)
CSS ( каскадная таблица стилей, какого цвета кнопки, цвет жирный/нежирный)
Механика действия этого организма-это работа с JavaScript 
(чтоб отправлять запрос, выпал список, поставить фильтры и тд.)

Клиент ставит в нужном виде плейсхолдеры (логин, пароль, нажать) , отправляет HTTP request в эндпоинт, 
методом POST, в котором есть Body, в нем будут лежать логин и пассворд в формате json 

Сервер даёт запрос БД, есть ли такой человек по такому логину, т. е. идентифицирует. 
Такой ли пароль у этого логина-аутентификация. 
Авторизация - права юзера в личный кабинет, у которого такой логин и пароль. 

 2. Что такое HTTP и HTTPS. 
HTTP (Hyper Text Transfer Protocol)-это протокол Клиент-серверной архитектуры для обмена данными в интернете, 
позволяющий принимать различные ресурсы, например HTML доки. 
Инициирует запрос к серверу самим получателем, обычно веб-браузером. Использует TСP-порт 80. 
HTTPS  (Hyper Text Transfer Protocol Secure) - расширение протокола HTTP для поддержки 
шифрования в целях повышения безопасности. Использует ТСР-порт 443 (default). 

 3. HTTP методы. 
Указывают какое желаемое действие выполнится для данного ресурса. 
Могут быть: безопасными, идемпотентность и кешируемыми.  
Get - запрашивает представление ресурса, метод может только извлекать данные. 
Head - запрашивает ресурс как и Get, но без тела ответа. 
Get и Head используются только для чтения данных, не изменяя их. 
Post - используется для отправки сущностей к определенному ресурсу. 
Часто вызывает изменения состояния или какие-то побочные эффекты на сервере. 
Put - заменяет все текущие представления ресурса данными запроса. 
Delete - удаляет указанный ресурс. 
Connect - устанавливает тунель к серверу, определенному по ресурсу. 
Options - используется для описания параметров соединения с ресурсом. 
Trace - выполняет вызов возвращаемого тестового сообщения с ресурса. 
Patch - используется для частичного изменения ресурса. 

 4. HTTP статус-коды сервера. 
Коды ответов (состояния), которые показывают, был ли успешно выполнен HTTP запрос. 
Делятся на 5 классов:                                 
    1. Информационные 100-199 (100 Continue, 101 Switching protocol, 102 Processing, 103 Early hints)                       
    2. Успешные 200-299 (200 Ok, 201 Created, 202 Accepted, 203 Non authoritative information, 
204 No content,  205 Reset content, 206 Partial content)                                     
    3. Перенаправление 300-399 (300 Multiple choice, 301 Moved permanently, 302 Found, 303 See other, 304 Not modified, 
305 Use proxy, 306 Switch proxy, 307 Temporary redirect, 308 Permanent redirect)                                     
    4. Клиентские ошибки 400-499 (400 Bed request, 401 Unauthorised, 402 Payment required, 403 Forbidden, 404 Not found, 
405 Method not allowed, 406 Not acceptable, 407 Proxy authentication required, 408 Request timeout, 409 Conflict, 
410 Gone, 411  Length required, 412 Precondition failed, 413 Request entity too large, 414 Request URI too long, 
415 Unsupported media type, 416 Requested range not satisfiable, 417 Expectation failed)                                        
    5. Серверные ошибки 500-599 (500 Internal server error, 501 Not implemented, 502 Bad gateway, 503 Service unavailable, 
504 Gateway timeout, 505 HTTP version not supported)

 5. Что такое ядро браузера. 
В каждом браузере есть ядро. 
Это такая программа в браузере, которая делится на 2 части (движок рендеринга или макета и движок JS), 
она распознаёт и начинает выполнять Java скрипты, отвечает за получение содержимого веб-страницы HTML, 
XML парсер, изображения, организацию информации, например добавление CSS и т. д., 
рассчитывает режим отображения веб-страницы и вывод ее на монитор. 
Разница в ядре браузера будет по-разному будет интерпретировать синтаксис веб-страницы, 
поэтому  эффект рендеринга (отображения) будет другим. 

 6. Какие браузеры какие ядра используют. 
Самые распространённые ядра браузеров на сегодня:
Trident (Internet Explorer), Gecko (Mozilla Firefox), Webkit (Chrome, Safari)

 7. Что такое API. 
Application Programming Interface - программный интерфейс приложения, специальный протокол, 
который позволяет взаимодействовать компьютерным программам и использовать функции одного приложения внутри другого. 
Готовый код со спецификацией возможных взаимодействий с компонентом ПО.  
Например, машина - это ПО, значит ее API содержит информацию, что машина может ускоряться и как, тормозить, включать радио и тд. 
API имеет 3 уровня:
Приложение: это приложения, которые используются на ПО или смартфонах. 
Программирование: программисты используют АПИ, чтобы писать код. 
Интерфейс: как пользователь взаимодействует с приложением. 
Помогает разработчикам быстрее писать код. 
Бывает публичным и приватным. 
Делает сложные операции простыми для клиентов. 

 8. Что такое эндпоинты. 
Это конечная точка представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. 
Адрес, на который отправляются сообщения. Пишется в командной строке после имени и слеша, указывает как получить доступ 
к запрашиваемому ресурсу , например страничку с логином /loginpage , а метод указывает разрешённые взаимодействия с ресурсом. 

 9. URL (URI, URL, URN)  
URI (Uniform Resource Identifier) строка символов, которая используется для идентификации какого-нибудь ресурса. 
Имя и адрес ресурса в сети, который включает в себя URL и URN. 
URL (Uniform Resource Locator) унифицированный определитель местонахождения ресурса, 
определяет адрес ресурса в сети и способ обращения к нему.  
URN (Uniform Resource Name) ресурс со статичным именем без привязки к расположению этого ресурса. 
Определяет только название ресурса, но не говорит как к нему подключиться.  

 10. Идемпотентные HTTP методы. 
Идемпотентность - это свойство выполнять определённые действия несколько раз и по-прежнему получать один и тот же результат, 
такой как если бы выполнить это действие только один раз. 
Когда клиенты могут делать один и тот же вызов неоднократно при одном и том же результате, 
то есть большое количество идентичных запросов имеет такой же эффект как и один запрос. 
Методы Get, Head, Put, Options, Trace определены как безопасные запросы, 
они предназначены только для получения информации и не должны изменять состояние сервера.
Безопасные методы идемпотентны, но это не значит, что сервер должен возвращать тот же самый результат каждый раз. 
Например, метод Delete возвращает статус 200 Ок или 204 No content, но для последующих запросов 
будет возвращать 404 No found, когда сервер удаляет ресурс, следующий вызов не найдёт этот ресурс и вернёт 404. 
Состояние на сервере после каждого вызова Delete то же самое, но ответы разные. 

 11. Безопасные HTTP методы. 
Метод HTTP считается безопасным, если он не меняет состояние сервера. 
Другими словами, если он проводит операцию только чтения (read only). 
Методы Get, Head, Options - безопасные, и являются идемпотентными, как и некоторые другие, 
но при этом небезопасные,  такие как Put и Delete. 
Даже если безопасные методы только для чтения, сервер все равно может сменить своё состояние, 
например, он может сохранять статистику, но он не должен вызывать внешних эффектов. 
Браузеры могут вызывать безопасные методы, не опасаясь причинить вред серверу и дополнительную нагрузку, 
это позволяет им выполнить некоторые действия, например, предварительная загрузка без риска. 
Поисковые роботы так же полагаются на вызовы безопасных методов. 

 12. Идентификация, Аутентификация, Авторизация. 
Идентификация- процесс распознавания пользователя по его идентификатору. 
Например Имя Фамилия, если пользователь ввёл и система нашла такого пользователя, значит он прошёл идентификацию. 
Аутентификация-процедура проверки подлинности, доказательство что пользователь именно тот, за кого себя выдаёт. 
Например, для доказательства, что человек существует с таким именем и фамилией, необходимо наличие одного из типов 
аутентификационных данных: отпечатки пальцев, пинкод, пароли, секретные слова, токены. 
Авторизация- после успешного прохождения аутентификации система предоставляет доступ к его ресурсам и совершении банковских операций. 
То есть произойдёт авторизация- предоставление определенных прав. 
Однофакторная аутентификация - один пароль.
Двухфакторная (многофакторная) - пользователю нужно предоставить 2 разных типа аутентификационных данных. 
Например, пароль и отпечаток пальца. 
Однофакторная двухэтапная- после введения корректного логина и пароля, система высылает одноразовый кратковременный пароль 
на смартфон или генерируется с помощью специального приложения.

 13. Что такое IP.  
Internet Protocol - это уникальный, идентификатор  устройства в интернете или локальной сети. 
Он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. 
Это приблизительная оценка геолокации пользователя не на географической, а на числовой основе.
 
 14. Что такое октеты в DNS. 
DNS пакет (Domain Name System) - система доменных имён, компьютерная распределительная система для получения информации о доменах. 
Структура пакета DNS :
 ⁃ Header (заголовок)
 ⁃ Question (секция запроса)
 ⁃ Answers (секция ответа)
 ⁃ Authority (секция ответа об уполномоченных серверах)
 ⁃ Additional (секция ответа дополнительных записей)
Header - заголовок пакета DNS, состоящий из 12 октет. Октет- это 8 двоичных разрядов (называют байтом). 
Октет может принимать 256 возможных состояний: кодов, значений, комбинаций битов (нулей и единиц). 
Имена в домене имеют субполя. Каждое субполе представляет собой октет IP адреса, который состоит из 4 частей, 
записанных в виде десятичных чисел с точками, например, 192.168.1.1. Каждую из этих 4х частей называют октетом. 
Октет представляет собой восемь двоичных цифр, например 11000000, или 192 в десятичном виде). 

 15. Что такое порт, сколько портов у Linux сервера.
Порт- это цифровой идентификатор (набор цифр до 16 бит) программы, которая используется для создания определенного интернет-соединения, 
привязанного к IP адресу. На сервер установлено некоторое количество приложений, позволяющих ускорить процесс обработки данных. 
К этим приложениям относятся:
-обеспечивающий доступ к интернет-ресурсам веб сервер;
-отвечающий за рассылку писем почтовый сервер;
-служащий для обмена файлами FTP сервер.
С помощью порта, ПК распознаёт сначала IP сервера, потом идентификатор порта FTP-cревера для соединения с приложением FTP-сервера. 
При обратной связи подключение происходит аналогично. 
Линукс сервер может поддерживать более 65 тыс. портов. Кортеж (локальный IP адрес, локальный порт, удаленный IP адрес, удаленный порт) 
это то, что определяет TCP соединение, это означает, что более 65536 соединений могут поддерживаться, 
если более чем один из этих параметров является бесплатным. 
Например, соединения с одним номером порта на нескольких удаленных хостах из нескольких локальных IP адресов. 

 16. Уровни OSI. 
Сетевая модель OSI (Open System Interconnection model) сетевая модель стека сетевых протоколов OSI/ISO. 
Посредством данной модели различные сетевые устройства могут взаимодействовать друг с другом. 
Модель определяет различные уровни взаимодействия систем. Каждый уровень выполняет определённые функции при таком взаимодействии.  
Уровни: 
 1. Physical Физический (единицей нагрузки здесь является бит)
 2. Data link Канальный 
 3. Network Сетевой
 4. Transport Транспортный
 5. Session Сеансовый 
 6. Presentation Представительский
 7. Application Прикладной

 17. Хедеры HTTP запросов. 
Заголовки являются основной частью HTTP запросов и ответов, они несут информацию о браузере клиента, запрошенной странице, сервере и многом другом. 
HTTP headers состоят из пар: Name : Value в каждой строке. 
Все заголовки разделяются на 4 основных группы:  
   1.General headers (должны включаться в любое сообщение клиента и сервера); 
   2.Request headers (используются только в запросах клиента); 
   3.Response headers ( только для ответов от сервера); 
   4.Entity headers (сопровождают каждую сущность сообщения).
